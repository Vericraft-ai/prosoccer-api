/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AutomatedFunctionsConsumer,
  AutomatedFunctionsConsumerInterface,
} from "../../contracts/AutomatedFunctionsConsumer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_donId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OnlyRouterCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "OCRResponse",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "RequestRevertedWithErrorMsg",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "RequestRevertedWithoutErrorMsg",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "RequestSent",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "err",
        type: "bytes",
      },
    ],
    name: "handleOracleFulfillment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "s_fulfillGasLimit",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastError",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastResponse",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastUpkeepTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestCBOR",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_responseCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_subscriptionId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_updateInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_upkeepCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "newDonId",
        type: "bytes32",
      },
    ],
    name: "setDonId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "_subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "_fulfillGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "_updateInterval",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "requestCBOR",
        type: "bytes",
      },
    ],
    name: "setRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801562000010575f80fd5b50604051620020eb380380620020eb833981810160405281019062000036919062000348565b33805f848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000d790620003eb565b60405180910390fd5b815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001655762000164816200017e60201b60201c565b5b505050806002819055505f600981905550505062000479565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001ef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e69062000459565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620002da82620002af565b9050919050565b620002ec81620002ce565b8114620002f7575f80fd5b50565b5f815190506200030a81620002e1565b92915050565b5f819050919050565b620003248162000310565b81146200032f575f80fd5b50565b5f81519050620003428162000319565b92915050565b5f8060408385031215620003615762000360620002ab565b5b5f6200037085828601620002fa565b9250506020620003838582860162000332565b9150509250929050565b5f82825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000005f82015250565b5f620003d36018836200038d565b9150620003e0826200039d565b602082019050919050565b5f6020820190508181035f8301526200040481620003c5565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c660000000000000000005f82015250565b5f620004416017836200038d565b91506200044e826200040b565b602082019050919050565b5f6020820190508181035f830152620004728162000433565b9050919050565b608051611c52620004995f395f818161037d015261054e0152611c525ff3fe608060405234801561000f575f80fd5b506004361061012a575f3560e01c80638ac00021116100ab578063dc180fc21161006f578063dc180fc2146102e9578063e184b0c214610307578063eb197c7714610325578063f2fde38b14610341578063f5c1279b1461035d5761012a565b80638ac00021146102535780638da5cb5b146102715780638dbe7b9d1461028f5780639959268a146102ad578063b1e21749146102cb5761012a565b806348802b92116100f257806348802b92146101c05780634b0795a8146101de5780636e04ff0d146101fc57806378ca5de71461022d57806379ba5097146102495761012a565b80630ca761751461012e5780630cc9c94d1461014a5780633944ea3a1461016857806343cd3d86146101865780634585e33b146101a4575b5f80fd5b61014860048036038101906101439190610eb6565b61037b565b005b61015261043d565b60405161015f9190610f56565b60405180910390f35b610170610443565b60405161017d9190610fe9565b60405180910390f35b61018e6104cf565b60405161019b9190610f56565b60405180910390f35b6101be60048036038101906101b99190611066565b6104d5565b005b6101c861073b565b6040516101d59190610f56565b60405180910390f35b6101e6610741565b6040516101f39190610fe9565b60405180910390f35b610216600480360381019061021191906110b1565b6107cd565b604051610224929190611112565b60405180910390f35b61024760048036038101906102429190611140565b6107e9565b005b6102516107fb565b005b61025b61098a565b604051610268919061118d565b60405180910390f35b6102796109a3565b60405161028691906111e5565b60405180910390f35b6102976109ca565b6040516102a4919061120d565b60405180910390f35b6102b56109d0565b6040516102c29190610f56565b60405180910390f35b6102d36109d6565b6040516102e0919061120d565b60405180910390f35b6102f16109dc565b6040516102fe9190611244565b60405180910390f35b61030f6109f2565b60405161031c9190610fe9565b60405180910390f35b61033f600480360381019061033a91906112db565b610a7e565b005b61035b60048036038101906103569190611389565b610aef565b005b610365610b03565b6040516103729190610f56565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610400576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040b838383610b09565b827f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e660405160405180910390a2505050565b60095481565b60068054610450906113e1565b80601f016020809104026020016040519081016040528092919081815260200182805461047c906113e1565b80156104c75780601f1061049e576101008083540402835291602001916104c7565b820191905f5260205f20905b8154815290600101906020018083116104aa57829003601f168201915b505050505081565b600c5481565b5f6104ed60405180602001604052805f8152506107cd565b50905080610530576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105279061146b565b60405180910390fd5b426009819055506001600a5461054691906114b6565b600a819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663461d276260045f9054906101000a900467ffffffffffffffff1660036001600460089054906101000a900463ffffffff166002546040518663ffffffff1660e01b81526004016105d8959493929190611598565b6020604051808303815f875af192505050801561061357506040513d601f19601f820116820180604052508101906106109190611604565b60015b6106eb5761061f61163b565b806308c379a00361067b575061063361165a565b8061063e575061067d565b7f2ba61e3733e7ac99181c22307780f651ec8fd92fe661a84dfbe711710b2dc36c8160405161066d919061172b565b60405180910390a1506106e6565b505b3d805f81146106a7576040519150601f19603f3d011682016040523d82523d5f602084013e6106ac565b606091505b507f9c4bfa18304482256875c29fabb1a44a5ecd325f214ea17bab8f31e869faf4c8816040516106dc9190610fe9565b60405180910390a1505b610736565b6001600b546106fa91906114b6565b600b8190555080600581905550807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db860405160405180910390a2505b505050565b600b5481565b6007805461074e906113e1565b80601f016020809104026020016040519081016040528092919081815260200182805461077a906113e1565b80156107c55780601f1061079c576101008083540402835291602001916107c5565b820191905f5260205f20905b8154815290600101906020018083116107a857829003601f168201915b505050505081565b5f6060600854600954426107e1919061174b565b119150915091565b6107f1610b7d565b8060028190555050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610881906117c8565b60405180910390fd5b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f60015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60045f9054906101000a900467ffffffffffffffff1681565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b60085481565b60055481565b600460089054906101000a900463ffffffff1681565b600380546109ff906113e1565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2b906113e1565b8015610a765780601f10610a4d57610100808354040283529160200191610a76565b820191905f5260205f20905b815481529060010190602001808311610a5957829003601f168201915b505050505081565b610a86610b7d565b826008819055508460045f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083600460086101000a81548163ffffffff021916908363ffffffff160217905550818160039182610ae792919061197b565b505050505050565b610af7610b7d565b610b0081610c0c565b50565b600a5481565b8160069081610b189190611a48565b508060079081610b289190611a48565b506001600c54610b3891906114b6565b600c81905550827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c92589115628383604051610b70929190611b17565b60405180910390a2505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0190611b96565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7190611bfe565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610d5981610d47565b8114610d63575f80fd5b50565b5f81359050610d7481610d50565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610dc882610d82565b810181811067ffffffffffffffff82111715610de757610de6610d92565b5b80604052505050565b5f610df9610d36565b9050610e058282610dbf565b919050565b5f67ffffffffffffffff821115610e2457610e23610d92565b5b610e2d82610d82565b9050602081019050919050565b828183375f83830152505050565b5f610e5a610e5584610e0a565b610df0565b905082815260208101848484011115610e7657610e75610d7e565b5b610e81848285610e3a565b509392505050565b5f82601f830112610e9d57610e9c610d7a565b5b8135610ead848260208601610e48565b91505092915050565b5f805f60608486031215610ecd57610ecc610d3f565b5b5f610eda86828701610d66565b935050602084013567ffffffffffffffff811115610efb57610efa610d43565b5b610f0786828701610e89565b925050604084013567ffffffffffffffff811115610f2857610f27610d43565b5b610f3486828701610e89565b9150509250925092565b5f819050919050565b610f5081610f3e565b82525050565b5f602082019050610f695f830184610f47565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610fa6578082015181840152602081019050610f8b565b5f8484015250505050565b5f610fbb82610f6f565b610fc58185610f79565b9350610fd5818560208601610f89565b610fde81610d82565b840191505092915050565b5f6020820190508181035f8301526110018184610fb1565b905092915050565b5f80fd5b5f80fd5b5f8083601f84011261102657611025610d7a565b5b8235905067ffffffffffffffff81111561104357611042611009565b5b60208301915083600182028301111561105f5761105e61100d565b5b9250929050565b5f806020838503121561107c5761107b610d3f565b5b5f83013567ffffffffffffffff81111561109957611098610d43565b5b6110a585828601611011565b92509250509250929050565b5f602082840312156110c6576110c5610d3f565b5b5f82013567ffffffffffffffff8111156110e3576110e2610d43565b5b6110ef84828501610e89565b91505092915050565b5f8115159050919050565b61110c816110f8565b82525050565b5f6040820190506111255f830185611103565b81810360208301526111378184610fb1565b90509392505050565b5f6020828403121561115557611154610d3f565b5b5f61116284828501610d66565b91505092915050565b5f67ffffffffffffffff82169050919050565b6111878161116b565b82525050565b5f6020820190506111a05f83018461117e565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6111cf826111a6565b9050919050565b6111df816111c5565b82525050565b5f6020820190506111f85f8301846111d6565b92915050565b61120781610d47565b82525050565b5f6020820190506112205f8301846111fe565b92915050565b5f63ffffffff82169050919050565b61123e81611226565b82525050565b5f6020820190506112575f830184611235565b92915050565b6112668161116b565b8114611270575f80fd5b50565b5f813590506112818161125d565b92915050565b61129081611226565b811461129a575f80fd5b50565b5f813590506112ab81611287565b92915050565b6112ba81610f3e565b81146112c4575f80fd5b50565b5f813590506112d5816112b1565b92915050565b5f805f805f608086880312156112f4576112f3610d3f565b5b5f61130188828901611273565b95505060206113128882890161129d565b9450506040611323888289016112c7565b935050606086013567ffffffffffffffff81111561134457611343610d43565b5b61135088828901611011565b92509250509295509295909350565b611368816111c5565b8114611372575f80fd5b50565b5f813590506113838161135f565b92915050565b5f6020828403121561139e5761139d610d3f565b5b5f6113ab84828501611375565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806113f857607f821691505b60208210810361140b5761140a6113b4565b5b50919050565b5f82825260208201905092915050565b7f54696d6520696e74657276616c206e6f74206d657400000000000000000000005f82015250565b5f611455601583611411565b915061146082611421565b602082019050919050565b5f6020820190508181035f83015261148281611449565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6114c082610f3e565b91506114cb83610f3e565b92508282019050808211156114e3576114e2611489565b5b92915050565b5f819050815f5260205f209050919050565b5f8154611507816113e1565b6115118186610f79565b9450600182165f811461152b576001811461154157611573565b60ff198316865281151560200286019350611573565b61154a856114e9565b5f5b8381101561156b5781548189015260018201915060208101905061154c565b808801955050505b50505092915050565b5f61ffff82169050919050565b6115928161157c565b82525050565b5f60a0820190506115ab5f83018861117e565b81810360208301526115bd81876114fb565b90506115cc6040830186611589565b6115d96060830185611235565b6115e660808301846111fe565b9695505050505050565b5f815190506115fe81610d50565b92915050565b5f6020828403121561161957611618610d3f565b5b5f611626848285016115f0565b91505092915050565b5f8160e01c9050919050565b5f60033d11156116575760045f803e6116545f5161162f565b90505b90565b5f60443d106116e65761166b610d36565b60043d036004823e80513d602482011167ffffffffffffffff821117156116935750506116e6565b808201805167ffffffffffffffff8111156116b157505050506116e6565b80602083010160043d0385018111156116ce5750505050506116e6565b6116dd82602001850186610dbf565b82955050505050505b90565b5f81519050919050565b5f6116fd826116e9565b6117078185611411565b9350611717818560208601610f89565b61172081610d82565b840191505092915050565b5f6020820190508181035f83015261174381846116f3565b905092915050565b5f61175582610f3e565b915061176083610f3e565b925082820390508181111561177857611777611489565b5b92915050565b7f4d7573742062652070726f706f736564206f776e6572000000000000000000005f82015250565b5f6117b2601683611411565b91506117bd8261177e565b602082019050919050565b5f6020820190508181035f8301526117df816117a6565b9050919050565b5f82905092915050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261183a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826117ff565b61184486836117ff565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61187f61187a61187584610f3e565b61185c565b610f3e565b9050919050565b5f819050919050565b61189883611865565b6118ac6118a482611886565b84845461180b565b825550505050565b5f90565b6118c06118b4565b6118cb81848461188f565b505050565b5b818110156118ee576118e35f826118b8565b6001810190506118d1565b5050565b601f82111561193357611904816114e9565b61190d846117f0565b8101602085101561191c578190505b611930611928856117f0565b8301826118d0565b50505b505050565b5f82821c905092915050565b5f6119535f1984600802611938565b1980831691505092915050565b5f61196b8383611944565b9150826002028217905092915050565b61198583836117e6565b67ffffffffffffffff81111561199e5761199d610d92565b5b6119a882546113e1565b6119b38282856118f2565b5f601f8311600181146119e0575f84156119ce578287013590505b6119d88582611960565b865550611a3f565b601f1984166119ee866114e9565b5f5b82811015611a15578489013582556001820191506020850194506020810190506119f0565b86831015611a325784890135611a2e601f891682611944565b8355505b6001600288020188555050505b50505050505050565b611a5182610f6f565b67ffffffffffffffff811115611a6a57611a69610d92565b5b611a7482546113e1565b611a7f8282856118f2565b5f60209050601f831160018114611ab0575f8415611a9e578287015190505b611aa88582611960565b865550611b0f565b601f198416611abe866114e9565b5f5b82811015611ae557848901518255600182019150602085019450602081019050611ac0565b86831015611b025784890151611afe601f891682611944565b8355505b6001600288020188555050505b505050505050565b5f6040820190508181035f830152611b2f8185610fb1565b90508181036020830152611b438184610fb1565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000005f82015250565b5f611b80601683611411565b9150611b8b82611b4c565b602082019050919050565b5f6020820190508181035f830152611bad81611b74565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c660000000000000000005f82015250565b5f611be8601783611411565b9150611bf382611bb4565b602082019050919050565b5f6020820190508181035f830152611c1581611bdc565b905091905056fea26469706673582212208f9efe6a317d1f37fc68765d366decbf770285714630924c46b6577b0f1267d564736f6c63430008140033";

type AutomatedFunctionsConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AutomatedFunctionsConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AutomatedFunctionsConsumer__factory extends ContractFactory {
  constructor(...args: AutomatedFunctionsConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: PromiseOrValue<string>,
    _donId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AutomatedFunctionsConsumer> {
    return super.deploy(
      router,
      _donId,
      overrides || {}
    ) as Promise<AutomatedFunctionsConsumer>;
  }
  override getDeployTransaction(
    router: PromiseOrValue<string>,
    _donId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, _donId, overrides || {});
  }
  override attach(address: string): AutomatedFunctionsConsumer {
    return super.attach(address) as AutomatedFunctionsConsumer;
  }
  override connect(signer: Signer): AutomatedFunctionsConsumer__factory {
    return super.connect(signer) as AutomatedFunctionsConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AutomatedFunctionsConsumerInterface {
    return new utils.Interface(_abi) as AutomatedFunctionsConsumerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AutomatedFunctionsConsumer {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AutomatedFunctionsConsumer;
  }
}
